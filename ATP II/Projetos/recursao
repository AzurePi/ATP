#include <stdio.h>
#include <stdlib.h>


void decompor(int *conjunto, int M, int m, int linha);


int main(){
	int N, M;
	int *conjunto; //endereço do vetor dos números que serão usados na combinação
	int *inteiros; //endereço do vetor dos números que serão decompostos 
	int i, j;
	int *maior; //endereço do vetor que armazenará a maior combinação possível que decompõe K
	
	scanf("%d %d", &N, &M);
	
	//alocação dinâmica dos vetores de acordo com a entrada
	conjunto = malloc(M*sizeof(int));
	inteiros = malloc(N*sizeof(int));
	
	maior = malloc(M*sizeof(int);
	
	//leitura dos valores usados na combinação
	for(i = 0; i<M; i++)
		scanf("%d ", &conjunto[i]);
	
	//leitura dos valores a serem descompostos
	for(i = 0; i<N; i++)
		scanf("%d ", &inteiros[i]);
	
	
	for(i = 0; i<N; i++)
		decompor(conjunto, M, 0, inteiro[i], maior, 0, 0);
	

	//liberação da memória alocada
	free(conjunto);
	free(inteiros);
	free(maior);
	
	return 0;
}

int *recombinar(int *conjunto, int m, int M){
	int *combinado, aux;
	
	for(i = 0; i<m; i++)
	{
		
	}

	for(j = 1; j<=m; j++)
	{
		//altera a posição dos números em "conjunto"
		for(i = 0; i<M-1; i++)
		{	
			aux = combinado[i];
			combinado[i] = combinado[i+1];
			combinado[i+1] = aux;	
		}
	}
	
	for(i = m; m < M; i++)
		combinado[i] = 0;
	
	return combinado;
}

void decompor(int *conjunto, int M, int m, int K, int *maior, int maiorI, int count){
	int i, sum;
	
	if(m > sM)
	{
		if(maior[0] == 0)
		{
			printf("0\n");
			return;
		}else
		{
			printf("%d ", count);
			for(i = 0; i < maiorI; i++)
				printf("%d ", maior[i]);
			printf("\n");
			return;
		}
	}

	
	while(sum < K)
	{
		sum += conjunto[m];
		m++;
	}
	
	if(sum == K)
	{
		count++;
		if(comparar(conjunto, maior))
			maior = conjunto;
	}
	
	
	
	
	
	return;	
}
